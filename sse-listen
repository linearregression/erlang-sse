#!/usr/bin/env escript
%% -*- erlang -*-

main(Arguments) ->
    Parameters = parameters(Arguments),
    case check(Parameters) of
	true ->
	    application:start(inets),
	    listen(Parameters);
	_ ->
	    usage()
    end.

listen(Parameters) ->
    {ok, RequestId} = httpc:request(get, request(Parameters), [], [{sync, false}, {stream, self}]),
    loop(RequestId).

loop(RequestId) ->
    receive
	{http, {RequestId, stream_start, _}} ->
	    loop(RequestId);

	{http, {RequestId, stream, Data}} ->
	    io:put_chars(unicode:characters_to_list(Data)),
	    loop(RequestId);

	{http, {RequestId, stream_end, _}} ->
	    ok
    end.


parameters(Parameters) ->
    parameters(Parameters, []).

parameters([[$-, $- | Option], Value | T], Parameters) ->
    parameters(T, [{Option, Value} | Parameters]);
parameters([], P) ->
    P;
parameters(_, _) ->
    usage().

check(Parameters) ->
    proplists:is_defined("topic", Parameters).

usage() ->
    io:format("Usage: ~s --topic topic [--last event_id]~n", [escript:script_name()]),
    halt(1).

url(Parameters) ->
    "http://localhost:8080/es/" ++ proplists:get_value("topic", Parameters).

headers(Parameters) ->
    case proplists:get_value("last", Parameters) of
	undefined ->
	    [];
	EventId ->
	    [{"Last-Event-ID", EventId}]
    end.

request(Parameters) ->
    {url(Parameters), headers(Parameters)}.
